import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'biz.aQute.bnd:biz.aQute.bnd.gradle:3.1.0'
        classpath "gradle.plugin.com.github.lburgazzoli:gradle-karaf-plugin:0.0.32"
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3"
        classpath "com.bmuschko:gradle-nexus-plugin:2.3.1"
    }
}

plugins {
    id "com.github.hierynomus.license" version "0.12.1"
    id 'com.palantir.git-version' version '0.5.2'
    id 'net.researchgate.release' version '2.4.0'
}

release {
  tagTemplate = 'v${version}'
  failOnPublishNeeded = false
}

// Maven
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: "com.github.lburgazzoli.karaf"
apply plugin: "io.codearte.nexus-staging"

publishing {
    publications {
        Publication(MavenPublication) {
            groupId rootProject.group
            artifactId rootProject.name
            artifact("${rootProject.buildDir}/karaf/features/${rootProject.name}-${rootProject.version}.xml") {
                classifier "features"
            }
        }
    }
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'java'

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

}

subprojects {
    version rootProject.version
    group rootProject.group

    apply plugin: 'java'
    apply plugin: 'osgi'
    apply plugin: 'license'
    apply plugin: 'java-library-distribution'
    apply plugin: 'biz.aQute.bnd.builder'

    apply plugin: 'maven'
    apply plugin: 'maven-publish'

    apply plugin: 'com.bmuschko.nexus'

    license {
      header rootProject.file('LICENSE-HEADER')
    }

    publishing {
        publications {
            Publication(MavenPublication) {
                from components.java
                groupId project.group
                artifactId project.name
                version project.version
            }
        }
    }

    dependencies {
        // The production code uses the SLF4J logging API at compile time
        compile 'org.slf4j:slf4j-api:1.7.18'

        // Unit testing
        testCompile 'junit:junit:4.12'

        // Remove boilerplate
        compile 'org.projectlombok:lombok:1.16.8'

        // Guava
        compile 'com.google.guava:guava:19.0'

        // OSGi
        compile 'org.osgi:org.osgi.core:6.0.0'
        compile 'org.osgi:org.osgi.service.cm:1.5.0'
        compile 'org.osgi:org.osgi.service.component:1.3.0'
        compile 'biz.aQute.bnd:biz.aQute.bndlib:3.2.0'

    }

    task delombok(type: JavaExec) {
          inputs.files(file('src/main/java'))
          outputs.dir(file('src/main/delombok'))
          classpath = configurations.compile
          main = "lombok.launch.Main"
          args("delombok", "--quiet", "src/main/java", "--target", "src/delombok/java")
      }

      javadoc {
          inputs.files(file("src/delombok/java"))
          source = file("src/delombok/java")
          classpath = configurations.compile
      }

      javadoc.dependsOn(delombok)

      task sourcesJar(type: Jar) {
          group "Build"
          description "An archive of the source code"
          classifier "sources"
          from sourceSets.main.allJava
      }

      task javadocJar(type: Jar) {
          group "Build"
          description "An archive of the javadoc"
          classifier "javadoc"
          from javadoc
      }

      jar.finalizedBy sourcesJar
      jar.finalizedBy javadocJar

      artifacts {
          sourcesJar
          javadocJar
      }

      extraArchive {
       javadoc false
       sources false
      }

      modifyPom {
           project {
               name project.name
               description 'CI Components'
               url 'http://cicomponents.org'
               inceptionYear '2016'

               scm {
                   url 'https://github.com/cicomponents/cicomponents'
                   connection 'scm:git:git://github.com/cicomponents/cicomponents.git'
                   developerConnection 'scm:git:git@github.com:cicomponents/cicomponents.git'
               }

               licenses {
                   license {
                       name 'Mozilla Public License, v. 2.0'
                       url 'http://mozilla.org/MPL/2.0/'
                       distribution 'repo'
                   }
               }

               developers {
                   developer {
                       id 'yrashk'
                       name 'Yurii Rashkovskii'
                       email 'yrashk@gmail.com'
                   }
               }

               contributors {
               }
           }
      }

}

idea {
    project {
        languageLevel = '1.8'
        vcs = 'Git'
        ipr.withXml { xmlFile ->
            // enable 'Annotation Processors'
            xmlFile.asNode().component.find {
                it.@name == 'CompilerConfiguration'
            }['annotationProcessing'][0].replaceNode {
                annotationProcessing {
                    profile(default: true, name: 'Default', useClasspath: 'true', enabled: true)
                }
            }
        }
    }
}


configurations {
    dist

    [dist].forEach {
        // Exclude packages that might interfere with Karaf's logging
        it.exclude group: 'org.slf4j'
        it.exclude group: 'commons-logging'
        // Exclude javax.servlet so that it doesn't interfere with Karaf's setup
        it.exclude group: 'javax'
        it.exclude group: 'javax.servlet'
        // Exclude other packages that would interfere with Karaf's setup
        it.exclude group: 'org.apache.karaf'
        it.exclude group: 'org.apache.karaf.jaas'
        it.exclude group: 'org.apache.karaf.shell'
        it.exclude group: 'org.apache.karaf.config'
        it.exclude group: 'org.apache.felix'
        it.exclude group: 'org.eclipse.jetty'
        it.exclude group: 'org.ow2.asm'
        it.exclude group: 'org.eclipse.jetty'
        it.exclude group: 'org.eclipse.jetty.websocket'
    }

}

dependencies {
    dist project(':cicomponents-api')
    dist project(':cicomponents-common')
    dist project(':cicomponents-badges-api')
    dist project(':cicomponents-badges')
    dist project(':cicomponents-core')
    dist project(':cicomponents-fs-api')
    dist project(':cicomponents-fs')
    dist project(':cicomponents-git-api')
    dist project(':cicomponents-git')
    dist project(':cicomponents-github-api')
    dist project(':cicomponents-github')

    compile project(':cicomponents-ci')
    compile project(':cicomponents-test')
}


karaf {
    features {
        xsdVersion = '1.3.0'
        repository "mvn:org.apache.karaf.features/standard/4.0.7/xml/features"


        feature {
            name = 'cicomponents'
            includeProject = false

            configurations 'dist'

            feature('shell') {
                version = "4.0.7"
            }

            feature('shell-compat') {
                version = "4.0.7"
            }

            feature('scr') {
                version = "4.0.7"
            }

            feature('wrap') {
                prerequisite = true
            }

            feature('war') {
                version = "4.0.7"
            }

            feature('jaas') {
                version = "4.0.7"
            }

            bundle('com.jcraft:jsch') {
                wrap = true
                instruction 'Bundle-SymbolicName', 'com.jcraft.jsch'
                instruction 'Bundle-Version', '0.1.53'
            }

        }
    }

    kar {}
}

publishToMavenLocal.dependsOn generateFeatures

task dist(type: Exec) {
    workingDir "dist"
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine "cmd", "/c", "mvn install -Drelease.version=${rootProject.version}"
    } else {
        commandLine "mvn", "install", "-Drelease.version=${rootProject.version}"
    }
}

dist.dependsOn publishToMavenLocal
allprojects.forEach { dist.dependsOn it.tasks.findByName("publishToMavenLocal") }
